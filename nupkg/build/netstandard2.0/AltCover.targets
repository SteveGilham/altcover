<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AltCoverNetCoreEngine>$(MSBuildThisFileDirectory)../../tools/netcoreapp2.0/AltCover.Engine.dll</AltCoverNetCoreEngine>
    <AltCoverNetStdEngine>$(MSBuildThisFileDirectory)../../lib/netstandard2.0/AltCover.Engine.dll</AltCoverNetStdEngine>
    <AltCoverEngine Condition="Exists($(AltCoverNetStdEngine))">$(AltCoverNetStdEngine)</AltCoverEngine>
    <AltCoverEngine Condition="Exists($(AltCoverNetCoreEngine))">$(AltCoverNetCoreEngine)</AltCoverEngine>
    <AltCoverSavedDirectory>$(TargetDir)__Saved</AltCoverSavedDirectory>
  </PropertyGroup>

  <UsingTask TaskName="AltCover.Prepare"
        AssemblyFile="$(AltCoverEngine)" />
  <UsingTask TaskName="AltCover.Collect"
        AssemblyFile="$(AltCoverEngine)" />
  <UsingTask TaskName="AltCover.PowerShell"
        AssemblyFile="$(AltCoverEngine)" />
  <UsingTask TaskName="AltCover.GetVersion"
        AssemblyFile="$(AltCoverEngine)" />
  <UsingTask TaskName="AltCover.Echo"
        AssemblyFile="$(AltCoverEngine)" />
  <UsingTask TaskName="AltCover.RunSettings"
        AssemblyFile="$(AltCoverEngine)" />

  <PropertyGroup>
    <AltCoverVerbosity Condition="'$(AltCoverVerbosity)' == ''">Info</AltCoverVerbosity>
    <AltCoverPreFlightCheck Condition="Exists('$(AltCoverSavedDirectory)')">Fail</AltCoverPreFlightCheck>
    <AltCoverPreFlightCheck Condition="!Exists('$(AltCoverSavedDirectory)')">OK</AltCoverPreFlightCheck>
  </PropertyGroup>

  <Target Name="AltCoverPreFlight" Condition="'$(AltCover)' == 'true'">
    <Error Condition="Exists('$(AltCoverSavedDirectory)') AND '$(AltCoverForce)' != 'true'"
           Text="Directory '$(AltCoverSavedDirectory)' exists from a previous run.  Either manually examine and delete it, or run with '/p:AltCoverForce=true' to force deletion" />
    <Warning Condition="Exists('$(AltCoverSavedDirectory)') AND '$(AltCoverForce)' == 'true'"
             Text="Directory '$(AltCoverSavedDirectory)' exists from a previous run.  Forcibly deleting it" />
    <RemoveDir Directories="$(AltCoverSavedDirectory)"
               Condition="Exists('$(AltCoverSavedDirectory)') AND '$(AltCoverForce)' == 'true'" />
  </Target>

  <Target Name="AltCoverRunPreparation" Condition="'$(AltCover)' == 'true'">
    <ItemGroup>
      <AltCoverXmlOutput Include="$(AltCoverXmlReport)" />
      <AltCoverInputDirectory Include="$(TargetDir)" />
      <AltCoverOutputDirectory Include="$(AltCoverSavedDirectory)" />
    </ItemGroup>

    <PropertyGroup>
      <AltCoverDollarChar>$</AltCoverDollarChar>
      <AltCoverProjectName>$(AltCoverDollarChar)(ProjectName)</AltCoverProjectName>
      <AltCoverSolutionDir>$(AltCoverDollarChar)(SolutionDir)</AltCoverSolutionDir>
      <AltCoverNewGuid>$(AltCoverDollarChar)([System.Guid]::NewGuid())</AltCoverNewGuid>
      <AltCoverXmlReport Condition="'$(AltCoverXmlReport)' != '' AND '$(TargetFrameworks)' != ''">%(AltCoverXmlOutput.RootDir)/%(AltCoverXmlOutput.Directory)/%(AltCoverXmlOutput.Filename).$(TargetFramework)%(AltCoverXmlOutput.Extension)</AltCoverXmlReport>
      <AltCoverXmlReport Condition="'$(AltCoverXmlReport)' == '' AND '$(TargetFrameworks)' == ''">$(ProjectDir)coverage.xml</AltCoverXmlReport>
      <AltCoverXmlReport Condition="'$(AltCoverXmlReport)' == '' AND '$(TargetFrameworks)' != ''">$(ProjectDir)coverage.$(TargetFramework).xml</AltCoverXmlReport>
      <AltCoverShowStatic Condition="'$(AltCoverShowStatic' != '+' AND '$(AltCoverShowStatic' != '++'">-</AltCoverShowStatic>
      <AltCoverReportFormat Condition="'$(AltCoverReportFormat)' == ''">OpenCover</AltCoverReportFormat>
    </PropertyGroup>

    <PropertyGroup>
      <AltCoverXmlReport1>$(AltCoverXmlReport.Replace($(AltCoverProjectName),$(ProjectName)).Replace($(AltCoverNewGuid),$([System.Guid]::NewGuid().ToString())))</AltCoverXmlReport1>
      <AltCoverXmlReport2 Condition="'$(SolutionDir)' == ''">$(AltCoverXmlReport1.Replace($(AltCoverSolutionDir),'')</AltCoverXmlReport2>
      <AltCoverXmlReport2 Condition="'$(SolutionDir)' != ''">$(AltCoverXmlReport1.Replace($(AltCoverSolutionDir),$(SolutionDir)))</AltCoverXmlReport2>
    </PropertyGroup>

    <AltCover.PowerShell Condition="'$(AltCoverImportModule)' == 'true'" />
    <AltCover.GetVersion Condition="'$(AltCoverGetVersion)' == 'true'" />
    <AltCover.Prepare
      InputDirectories="@(AltCoverInputDirectory)"
      OutputDirectories="@(AltCoverOutputDirectory)"
      SymbolDirectories="$(AltCoverSymbolDirectories.Split('|'))"
      Dependencies="$(AltCoverDependencyList.Split('|'))"
      Keys="$(AltCoverKeys.Split('|'))"
      StrongNameKey="$(AltCoverStrongNameKey)"
      XmlReport="$(AltCoverXmlReport2)"
      FileFilter="$(AltCoverFileFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      AssemblyFilter="$(AltCoverAssemblyFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      AssemblyExcludeFilter="$(AltCoverAssemblyExcludeFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      TypeFilter="$(AltCoverTypeFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      MethodFilter="$(AltCoverMethodFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      AttributeFilter="$(AltCoverAttributeFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      PathFilter="$(AltCoverPathFilter.Replace('\',%00).Replace('||',%01).Split('|'))"
      AttributeTopLevel="$(AltCoverAttributeTopLevel.Replace('\',%00).Replace('||',%01).Split('|'))"
      TypeTopLevel="$(AltCoverTypeTopLevel.Replace('\',%00).Replace('||',%01).Split('|'))"
      MethodTopLevel="$(AltCoverMethodTopLevel.Replace('\',%00).Replace('||',%01).Split('|'))"
      ReportFormat="$(AltCoverReportFormat)"
      CallContext="$(AltCoverCallContext.Split('|'))"
      ZipFile="$(AltCoverZipFile)"
      MethodPoint="$(AltCoverMethodPoint)"
      SingleVisit="$(AltCoverSingle)"
      LineCover="$(AltCoverLineCover)"
      BranchCover="$(AltCoverBranchCover)"
      SourceLink="$(AltCoverSourceLink)"
      LocalSource="$(AltCoverLocalSource)"
      VisibleBranches="$(AltCoverVisibleBranches)"
      ShowStatic="$(AltCoverShowStatic)"
      ShowGenerated="$(AltCoverShowGenerated)"
      Verbosity="$(AltCoverVerbosity)" />
  </Target>

  <!-- Override Microsoft.TestPlatform.targets to do coverage work -->
  <Target Name="VSTest">
    <CallTarget Targets="AltCoverVSTestPreFlight" ContinueOnError="ErrorAndStop" />
    <CallTarget Targets="AltCoverVSTestCore" />
  </Target>

  <!-- As per the first part of Microsoft.TestPlatform.targets v2.1.300, but with pre-flight checks clause -->
  <Target Name="AltCoverVSTestPreFlight">
    <CallTarget Targets="AltCoverPreFlight" />
    <CallTarget Condition="'$(VSTestNoBuild)' != 'true'" Targets="BuildProject" />
    <CallTarget Targets="AltCoverRunPreparation" ContinueOnError="ErrorAndStop" />
  </Target>

  <!-- As per the second part Microsoft.TestPlatform.targets v2.1.300, but with OnError clause -->
  <Target Name="AltCoverVSTestCore">
    <CallTarget Targets="ShowCallOfVSTestTaskWithParameter" />
    <AltCover.RunSettings
      TestSetting="$(VSTestSetting)"
      Verbosity="$(AltCoverVerbosity)">
      <Output TaskParameter="Extended" PropertyName="VSTestSetting" />
    </AltCover.RunSettings>

    <Microsoft.TestPlatform.Build.Tasks.VSTestTask
      TestFileFullPath="$(TargetPath)"
      VSTestSetting="$(VSTestSetting)"
      VSTestTestAdapterPath="$(VSTestTestAdapterPath)"
      VSTestFramework="$(TargetFrameworkMoniker)"
      VSTestPlatform="$(PlatformTarget)"
      VSTestTestCaseFilter="$(VSTestTestCaseFilter)"
      VSTestLogger="$(VSTestLogger)"
      VSTestListTests="$(VSTestListTests)"
      VSTestDiag="$(VSTestDiag)"
      VSTestCLIRunSettings="$(VSTestCLIRunSettings)"
      VSTestConsolePath="$(VSTestConsolePath)"
      VSTestResultsDirectory="$(VSTestResultsDirectory)"
      VSTestVerbosity="$(VSTestVerbosity)"
      VSTestCollect="$(VSTestCollect)"
      VSTestBlame="$(VSTestBlame)" />
    <OnError ExecuteTargets="AltCoverGenerateCoverageResult" Condition="'$(AltCoverPreFlightCheck)' == 'OK' AND '$(AltCoverFailFast)' != 'true' " />
  </Target>

  <Target Name="AltCoverGenerateCoverageResult" AfterTargets="VSTest" Condition="'$(AltCover)' == 'true'">
    <PropertyGroup>
      <AltCoverColour Condition="'$(AltCoverShowSummary)' != ''">$(AltCoverShowSummary)</AltCoverColour>
      <AltCoverColour Condition="'$(AltCoverShowSummary)' == ''">Foreground</AltCoverColour>
    </PropertyGroup>

    <AltCover.Collect
      RecorderDirectory="$(TargetDir)"
      LcovReport="$(AltCoverLcovReport)"
      Threshold="$(AltCoverThreshold)"
      Cobertura="$(AltCoverCobertura)"
      SummaryFormat="$(AltCoverSummaryFormat)"
      Verbosity="$(AltCoverVerbosity)">
      <Output TaskParameter="Summary" PropertyName="AltCoverSummary" />
    </AltCover.Collect>
    <AltCover.Echo Text="$(AltCoverSummary)" Colour="$(AltCoverColour)"
                   Condition="$(AltCoverShowSummary) != ''"
                   Verbosity="$(AltCoverVerbosity)" />
    <ItemGroup>
      <AltCoverRecorderGFiles Include="$(TargetDir)/AltCover.Recorder.g.*" />
      <AltCoverFSharpFiles Include="$(TargetDir)/FSharp.Core.*" />
      <AltCoverSavedFiles Include="$(AltCoverSavedDirectory)/*.*" />
      <AltCoverRunSettings Include="$(TEMP)/*.altcover.runsettings" />
    </ItemGroup>
    <Delete Files="@(AltCoverRunSettings)" />
    <Delete Files="@(AltCoverRecorderGFiles)" />
    <Delete Files="@(AltCoverFSharpFiles)" />
    <Move SourceFiles="@(AltCoverSavedFiles)" DestinationFolder="$(TargetDir)" OverwriteReadOnlyFiles="true" />
    <RemoveDir Directories="$(AltCoverSavedDirectory)" Condition="Exists('$(AltCoverSavedDirectory)')" />
  </Target>
</Project>